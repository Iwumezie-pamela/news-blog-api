// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                String                @id @default(cuid())
    // userId      String?   @unique
    email             String                @unique
    firstName         String?
    lastName          String?
    accessToken       String?               @db.LongText
    password          String
    expiresIn         DateTime?
    phoneNumber       String?
    userName          String?
    image             String?
    blogs             Blog[]
    like              Like[]
    collaborations    Blog[]                @relation("BlogCollaborators")
    notifications     Notification[]
    checkedCategories CategoryLastChecked[]
    createdAt         DateTime              @default(now())
    updatedAt         DateTime              @updatedAt
}

model Blog {
    id            String         @id @default(cuid())
    title         String
    content       String
    image         String
    authorId      String
    author        User           @relation(fields: [authorId], references: [id])
    like          Like[]
    collaborators User[]         @relation("BlogCollaborators")
    categoryId    String
    category      Category       @relation(fields: [categoryId], references: [id])
    notifications Notification[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Like {
    id       String @id @default(cuid())
    authorId String
    blogId   String
    author   User   @relation(fields: [authorId], references: [id])
    blog     Blog   @relation(fields: [blogId], references: [id])

    @@unique([authorId, blogId]) // Ensure a user can only like a post once
}

model Category {
    id          String               @id @default(cuid())
    name        String
    blogs       Blog[]
    lastChecked CategoryLastChecked?
    createdAt   DateTime             @default(now())
}

model CategoryLastChecked {
    id         String   @id @default(cuid())
    authorId   String
    author     User     @relation(fields: [authorId], references: [id])
    categoryId String   @unique
    category   Category @relation(fields: [categoryId], references: [id])
    date       DateTime @default(now())
}

model Notification {
    id        String   @id @default(cuid())
    message   String
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    Blog      Blog?    @relation(fields: [blogId], references: [id])
    blogId    String?
    createdAt DateTime @default(now())
}
